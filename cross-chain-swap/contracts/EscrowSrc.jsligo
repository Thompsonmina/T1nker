// #import "Immutables.jsligo" "Immutables"
// #import "TimeLocksLib.jsligo" "TimeLocksLib"
// #import "UniversalTransfer.jsligo" "UniversalTransfer"
// #import "BaseEscrow.jsligo" "BaseEscrow"

// export namespace EscrowSrc {

//     /**
//      * @notice See {IBaseEscrow-withdraw}.
//      * @dev The function works on the time interval highlighted with capital letters:
//      * ---- contract deployed --/-- finality --/-- PRIVATE WITHDRAWAL --/-- PUBLIC WITHDRAWAL --/--
//      * --/-- private cancellation --/-- public cancellation ----
//      */
//     function withdraw(bytes32 secret, Immutables calldata immutables)
//         external
//         onlyTaker(immutables)
//         onlyAfter(immutables.timelocks.get(TimelocksLib.Stage.SrcWithdrawal))
//         onlyBefore(immutables.timelocks.get(TimelocksLib.Stage.SrcCancellation))
//     {
//         _withdrawTo(secret, msg.sender, immutables);
//     }



//     /**
//      * @notice See {IEscrowSrc-withdrawTo}.
//      * @dev The function works on the time interval highlighted with capital letters:
//      * ---- contract deployed --/-- finality --/-- PRIVATE WITHDRAWAL --/-- PUBLIC WITHDRAWAL --/--
//      * --/-- private cancellation --/-- public cancellation ----
//      */
//     function withdrawTo(bytes32 secret, address target, Immutables calldata immutables)
//         external
//         onlyTaker(immutables)
//         onlyAfter(immutables.timelocks.get(TimelocksLib.Stage.SrcWithdrawal))
//         onlyBefore(immutables.timelocks.get(TimelocksLib.Stage.SrcCancellation))
//     {
//         _withdrawTo(secret, target, immutables);
//     }

//     /**
//      * @notice See {IEscrowSrc-publicWithdraw}.
//      * @dev The function works on the time interval highlighted with capital letters:
//      * ---- contract deployed --/-- finality --/-- private withdrawal --/-- PUBLIC WITHDRAWAL --/--
//      * --/-- private cancellation --/-- public cancellation ----
//      */
//     function publicWithdraw(bytes32 secret, Immutables calldata immutables)
//         external
//         onlyAfter(immutables.timelocks.get(TimelocksLib.Stage.SrcPublicWithdrawal))
//         onlyBefore(immutables.timelocks.get(TimelocksLib.Stage.SrcCancellation))
//     {
//         _withdrawTo(secret, immutables.taker.get(), immutables);
//     }

//     /**
//      * @notice See {IBaseEscrow-cancel}.
//      * @dev The function works on the time intervals highlighted with capital letters:
//      * ---- contract deployed --/-- finality --/-- private withdrawal --/-- public withdrawal --/--
//      * --/-- PRIVATE CANCELLATION --/-- PUBLIC CANCELLATION ----
//      */
//     function cancel(Immutables calldata immutables)
//         external
//         onlyTaker(immutables)
//         onlyAfter(immutables.timelocks.get(TimelocksLib.Stage.SrcCancellation))
//     {
//         _cancel(immutables);
//     }

//     /**
//      * @notice See {IEscrowSrc-publicCancel}.
//      * @dev The function works on the time intervals highlighted with capital letters:
//      * ---- contract deployed --/-- finality --/-- private withdrawal --/-- public withdrawal --/--
//      * --/-- private cancellation --/-- PUBLIC CANCELLATION ----
//      */
//     function publicCancel(Immutables calldata immutables)
//         external
//         onlyAfter(immutables.timelocks.get(TimelocksLib.Stage.SrcPublicCancellation))
//     {
//         _cancel(immutables);
//     }

//     /**
//      * @dev Transfers ERC20 tokens to the target and native tokens to the caller.
//      * @param secret The secret that unlocks the escrow.
//      * @param target The address to transfer ERC20 tokens to.
//      * @param immutables The immutable values used to deploy the clone contract.
//      */
//     function _withdrawTo(bytes32 secret, address target, Immutables calldata immutables)
//         internal
//         onlyValidImmutables(immutables)
//         onlyValidSecret(secret, immutables)
//     {
//         IERC20(immutables.token.get()).safeTransfer(target, immutables.amount);
//         _ethTransfer(msg.sender, immutables.safetyDeposit);
//         emit Withdrawal(secret);
//     }

//     let _withdrawTo = (secret: bytes, target: address, immutables: Immutables): unit => {
//         // Validate immutables and secret

//         BaseEscrow.BaseEscrow.onlyValidImmutables(immutables);
//         BaseEscrow.BaseEscrow.onlyValidSecret(secret, immutables);

//         // Transfer ERC20 tokens to target
//         let token = immutables.token.get();
//         let amount = immutables.amount;
//         IERC20(token).safeTransfer(target, amount);

//         // Transfer safety deposit to caller
//         _ethTransfer(msg.sender, immutables.safetyDeposit);

//         // Emit withdrawal event
//         emit Withdrawal(secret);
//     }



//     /**
//      * @dev Transfers ERC20 tokens to the maker and native tokens to the caller.
//      * @param immutables The immutable values used to deploy the clone contract.
//      */
//     function _cancel(Immutables calldata immutables) internal onlyValidImmutables(immutables) {
//         IERC20(immutables.token.get()).safeTransfer(immutables.maker.get(), immutables.amount);
//         _ethTransfer(msg.sender, immutables.safetyDeposit);
//         emit EscrowCancelled();
//     }


    
// }