#import "./libraries/Immutables.jsligo" "Immutables"
#import "./libraries/TimeLocksLib.jsligo" "TimeLocksLib"
#import "./libraries/UniversalTransfer.jsligo" "UniversalTransfer"

// implements IBaseEscrow
export namespace BaseEscrow  {

    export type immutables_hash = bytes; // hash of immutables
    export type escrow_state = ["Active"] | ["Cancelled"] | ["Finalized"];
    export type escrow_type = ["Source"] | ["Destination"];

    
    export const onlyTaker = (im: Immutables.Immutables.immutables) : unit => {
        if (Tezos.get_sender() != im.taker) {
            failwith("NOT_TAKER");   // abort the transaction
        };
          
    };

    export const onlyValidSecret = (secret: bytes, immutables: Immutables.Immutables.immutables) : unit => {
        if (Crypto.keccak(secret) != immutables.hashlock) {
            failwith("INVALID_SECRET");
        };
    }

    export const onlyAfter = (start: timestamp) : unit => {
        if (Tezos.get_now() < start) {
            failwith("INVALID_TIME");
        };
    }
        
    export const onlyBefore = (stop: timestamp) : unit => {
        if (Tezos.get_now() >= stop) {
            failwith("INVALID_TIME");
        };
    }

    // Checks if a secret matches the hashlock by comparing their keccak hashes
    const isValidSecret = (secret: bytes, hashlock: bytes): bool => {
        return Crypto.keccak(secret) == hashlock;
    }

    
    const uniTransfer = (token_opt: option<address>, from_: address, to_: address, amountNat: nat): operation => {
        return UniversalTransfer.UniversalTransfer.uniTransfer(token_opt, from_, to_, amountNat);
    }


    // type validSecretParams = {
    //     secret: bytes,
    //     hashlock: bytes
    // }

    // @entry
    // const isvalidSecretEntry = (params: validSecretParams, storage: bool): [list<operation>, bool] => {
        
    //     // Check if secret matches hashlock by comparing keccak hashes
    //     const result: bool = Crypto.keccak(params.secret) == params.hashlock;
    //     return [list([]), result];
    // }
    
}

